cc=stcsCAS(t = 0:30, d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(0:30, cc, t='l', ylim = c(0,1), log='x')
plot(0:30, cc, t='l', ylim = c(0,1), log='y')
cc=stcsCAS(t = 0:30, d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(0:30, cc, t='l', ylim = c(0,1), log='xy')
cc=stcsCAS(t = 0:30, d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(0:30, cc, t='l', ylim = c(0,1), log='')
plot(0:30, 1/cc, t='l', ylim = c(0,1), log='')
1/cc
cc=stcsCAS(t = 0:30, d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(0:30, cc, t='l', ylim = c(0,1), log='')
cc=stcsCAS(t = 0:30, d = 3.5, paramt = c(2,1), params = c(4, 0.2))
lines(0:30, 1-cc, col='red')
cc=stcsCAS(t = 0:30, d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(0:30, cc, t='l', ylim = c(0,1), log='')
cc=stcsCAS(t = 0:30, d = 3.5, paramt = c(2,1), params = c(4, 0.2))
lines(0:30, cc, col='red')
cc=stcsCAS(t = 0:30, d = 4.5, paramt = c(2,1), params = c(4, 0.2))
lines(0:30, cc, col='red')
cc=stcsCAS(t = 0:30, d = 40.5, paramt = c(2,1), params = c(4, 0.2))
lines(0:30, cc, col='red')
cc=stcsCAS(t = 0:30, d = 10.5, paramt = c(2,1), params = c(4, 0.2))
lines(0:30, cc, col='red')
cc=stcsCAS(t = 0:30, d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(0:30, cc, t='l', ylim = c(0,1), log='')
cc=stcsCAS(t = 0:30, d = 1, paramt = c(2,1), params = c(4, 0.2))
lines(0:30, cc, col='red')
cc=stcsCAS(t = 0:30, d = 0.1, paramt = c(2,1), params = c(4, 0.2))
lines(0:30, cc, col='red')
cc
cc=stcsCAS(t = 0:30, d = 0.5, paramt = c(2,1), params = c(4, 0.2))
lines(0:30, cc, col='red')
cc
cc=stcsCAS(t = 0.1, d = 0, paramt = c(2,1), params = c(4, 0.2))
cc
cc=stcsCAS(t = seq(0.01, 0.99, by=0.01), d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(seq(0.01, 0.99, by=0.01), cc, t='l', ylim = c(0,1), log='')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(seq(0.01, 100, by=0.01), cc, t='l', ylim = c(0,1), log='')
plot(seq(0.01, 100, by=0.01), cc, t='l', ylim = c(0,1), log='x')
cc=stcsCAS(t = eq(0.01, 100, by=0.01), d = 0.5, paramt = c(2,1), params = c(4, 0.2))
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 0.5, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 10.5, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 20, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 200, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 2000, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 1000, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 10000, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 100000, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 1000000, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(seq(0.01, 100, by=0.01), 1-cc, t='l', ylim = c(0,1), log='x')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 1000000, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), 1-cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 100, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), 1-cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 1000, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), 1-cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 10, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), 1-cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 1, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), 1-cc, col='red')
cc=stcsCAS(t = seq(0.01, 1, by=0.01), d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(seq(0.01, 100, by=0.01), cc, t='l', ylim = c(0,1), log='x')
plot(seq(0.01, 1, by=0.01), cc, t='l', ylim = c(0,1), log='x')
cc=stcsCAS(t = seq(0.01, 1, by=0.01), d = 1, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 1, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 1, by=0.01), d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(seq(0.01, 1, by=0.01), cc, t='l', ylim = c(0,1), log='')
cc=stcsCAS(t = seq(0.01, 1, by=0.01), d = 1, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 1, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 1, by=0.01), d = 10, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 1, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 1, by=0.01), d = 100, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 1, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(seq(0.01, 100, by=0.01), cc, t='l', ylim = c(0,1), log='')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 100, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
plot(seq(0.01, 100, by=0.01), 1-cc, t='l', ylim = c(0,1), log='')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 100, paramt = c(2,1), params = c(4, 0.2))
plot(seq(0.01, 100, by=0.01), cc, t='l', ylim = c(0,1), log='x')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 0, paramt = c(2,1), params = c(4, 0.2))
plot(seq(0.01, 100, by=0.01), cc, t='l', ylim = c(0,1), log='x')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 100, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
lines(seq(0.01, 10, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 100, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 10, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 10, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 5, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
cc=stcsCAS(t = seq(0.01, 100, by=0.01), d = 1, paramt = c(2,1), params = c(4, 0.2))
lines(seq(0.01, 100, by=0.01), cc, col='red')
library(anySim)
?SimARTAp
ACF=acsCAS(param=c(1, 0.6), lag=100, var=1)
fx='qzi'
pfx=list(Distr=qgamma, p0=0.9, shape=0.1, scale=1)
ARTApar=EstARTAp(ACF=ACF, maxlag=0, dist=fx, params=pfx,
NatafIntMethod ='GH', NoEval=9, polydeg=8)
Sim=SimARTAp(ARTApar = ARTApar, burn = 1000, steps = 10^5, stand = 0)
acf(Sim$X)
lines(0:(length(ACF)-1), ACF)
plot(Sim$X[1:1000], type='l', col='red')
ACF=acsCAS(param=c(1, 0.6), lag=24*10, var=1)
fx='qzi'
pfx=list(Distr=qgamma, p0=0.9, shape=0.1, scale=1)
ARTApar=EstARTAp(ACF=ACF, maxlag=0, dist=fx, params=pfx,
NatafIntMethod ='GH', NoEval=9, polydeg=8)
Sim=SimARTAp(ARTApar = ARTApar, steps = 24*365*10^3, stand = 0)
acf(Sim$X)
lines(0:(length(ACF)-1), ACF)
Sim=SimARTAp(ARTApar = ARTApar, steps = 24*365*10^2, stand = 0)
acf(Sim$X)
lines(0:(length(ACF)-1), ACF)
plot(Sim$X[1:1000], type='l', col='red')
Xmat=matrix(data = Sim$X, ncol = 24, byrow = T)
Sim$X[1:48]
Xmat[1:2,]
Xmat[1:3,]
Sim$X[1:72]
Sim$X[49:72]
Xmat[3,]
Xsum=rowSums(Xmat)
Xsum=rowSums(Xmat)
p0sum=SMATAPKG::pdry(Xsum)
p0sum
p0sim=SMATAPKG::pdry(Sim$X)
p0sim
which(Xsum!=0)
NZID=which(Xsum!=0)
MATAPKG::pdry(Xsum[NZID])
NZID=which(Xsum!=0)
MATAPKG::pdry(Xsum[NZID])
SMATAPKG::pdry(Xsum[NZID])
p0sum/p0sim
p0sim/p0sum
p0sum/p0sim
p0sim
p0sum
p0sum/p0sim
mean(Xsum)/mean(Sim$X)
mean(Xsum)
mean(Sim$X)
Xsum=rowSums(Xmat)/24
p0sum=SMATAPKG::pdry(Xsum)
p0sim=SMATAPKG::pdry(Sim$X)
p0sum/p0sim
mean(Xsum)/mean(Sim$X)
p0sum/p0sim
Xmat[NZID,]
as.vector(Xmat[NZID,])
acf(as.vector(Xmat[NZID,]))
acf(as.vector(t(Xmat[NZID,])))
lines(0:(length(ACF)-1), ACF)
acf(Sim$X)
lines(0:(length(ACF)-1), ACF)
NZID=which(Xsum!=0)
acf(as.vector(t(Xmat[NZID,])))
lines(0:(length(ACF)-1), ACF)
temp=as.vector(t(Xmat[NZID,]))
acf(temp)
lines(0:(length(ACF)-1), ACF)
SMATAPKG::pdry(temp)
p0sum/p0sim
temp=as.vector((Xmat[NZID,]))
acf(temp)
lines(0:(length(ACF)-1), ACF)
SMATAPKG::pdry(temp)
p0sum/p0sim
temp=as.vector(t(Xmat[NZID,]))
acf(temp)
lines(0:(length(ACF)-1), ACF)
SMATAPKG::pdry(temp)
p0sum/p0sim
rowSums(Xmat[NZID,])
min(rowSums(Xmat[NZID,]))
mean(rowSums(Xmat[NZID,]))
temp=Xmat[NZID,]
acf(temp[1,])
acf(temp[2,])
acf(temp[4,])
acf(temp[1,])
plot(0,0)
plot(0,0, xlim(0, 100), ylim(0,1))
plot(0,0, xlim(c(0, 100)), ylim(c(0,1)))
plot(0,0, xlim=c(0, 100), ylim=c(0,1))
plot(NA,NA, xlim=c(0, 100), ylim=c(0,1))
i
i=1
cc=acf(temp[i,], plot = F, lag.max = 100)$acf
lines(0:100, cc)
cc
cc=acf(temp[i,], plot = F, lag.max = 24)$acf
lines(0:24, cc)
cc=acf(temp[i,], plot = F, lag.max = 23)$acf
lines(0:24, cc)
lines(0:23, cc)
plot(NA,NA, xlim=c(0, 100), ylim=c(0,1))
for (i in 1:length(NZID)) {
cc=acf(temp[i,], plot = F, lag.max = 23)$acf
lines(0:23, cc)
}
plot(NA,NA, xlim=c(0, 24), ylim=c(0,1))
for (i in 1:length(NZID)) {
cc=acf(temp[i,], plot = F, lag.max = 23)$acf
lines(0:23, cc)
}
CC=matrix(NA, ncol=24, nrow = length(NZID))
CC=matrix(NA, ncol=24, nrow = length(NZID))
for (i in 1:length(NZID)) {
cc=acf(temp[i,], plot = F, lag.max = 23)$acf
# lines(0:23, cc)
CC[i,]=cc
}
colMeans(CC)
CC
CC[,1:5]
colMeans(CC)
max(CC[,2])
mean(CC[,2])
min(CC[,2])
plot(Xsum, Xmat[,1])
cor(Xsum, Xmat[,1])
plot(Xsum[NZID], Xmat[NZID,1])
Xsum[NZID]
Xmat[NZID,1]
cor(Xsum[NZID], Xmat[NZID,1])
plot(Xsum[NZID], Xmat[NZID,10])
PD=rep(NA, length(NZID))
PD=rep(NA, length(NZID))
for (i in 1:length(NZID)) {
cc=acf(temp[i,], plot = F, lag.max = 23)$acf
# lines(0:23, cc)
CC[i,]=cc
PD[i]=SMATAPKG::pdry(temp[i,])
}
PD
mean(PD)
plot(Xsum[NZID], PD)
ACF=acsCAS(param=c(1, 0.6), lag=24*10, var=3)
fx='qzi'
ACF=acsCAS(param=c(1, 0.6), lag=24*100, var=3)
fx='qzi'
pfx=list(Distr=qgamma, p0=0.9, shape=0.1, scale=1)
ARTApar=EstARTAp(ACF=ACF, maxlag=0, dist=fx, params=pfx,
NatafIntMethod ='GH', NoEval=9, polydeg=8)
Sim=SimARTAp(ARTApar = ARTApar, steps = 24*365*10^2, stand = 0)
acf(Sim$X)
lines(0:(length(ACF)-1), ACF)
acf(Sim$X)
lines(0:(length(ACF)-1), ACF)
acf(Sim$X)
lines(0:(length(ACF)-1), ACF)
ACF=acsCAS(param=c(1, 0.6), lag=24*50, var=3)
fx='qzi'
ACF=acsCAS(param=c(1, 0.6), lag=24*50, var=1)
pfx=list(Distr=qgamma, p0=0.9, shape=0.1, scale=3)
ARTApar=EstARTAp(ACF=ACF, maxlag=0, dist=fx, params=pfx,
NatafIntMethod ='GH', NoEval=9, polydeg=8)
Sim=SimARTAp(ARTApar = ARTApar, steps = 24*365*10^2, stand = 1)
acf(Sim$X)
lines(0:(length(ACF)-1), ACF)
Xmat=matrix(data = Sim$X, ncol = 24, byrow = T)
Xsum=rowSums(Xmat)/24
p0sum=SMATAPKG::pdry(Xsum)
p0sim=SMATAPKG::pdry(Sim$X)
p0sum/p0sim
NZID=which(Xsum!=0)
temp=Xmat[NZID,]
plot(NA,NA, xlim=c(0, 24), ylim=c(0,1))
CC=matrix(NA, ncol=24, nrow = length(NZID))
PD=rep(NA, length(NZID))
for (i in 1:length(NZID)) {
cc=acf(temp[i,], plot = F, lag.max = 23)$acf
# lines(0:23, cc)
CC[i,]=cc
PD[i]=SMATAPKG::pdry(temp[i,])
}
colMeans(CC)
plot(Xsum[NZID], PD)
cor(Xsum[NZID], PD)
plot(Xsum[NZID], 1-PD)
cor(Xsum[NZID], 1-PD)
hist(PD)
mean(PD)
SMATAPKG::pdry(temp)
p0sum/p0sim
p0sum
p0sim
(1-p0sim)/(1-p0sum)
1-(1-p0sim)/(1-p0sum)
(1-p0sim)/(1-p0sum)
SMATAPKG::pdry(temp)
1-(1-p0sim)/(1-p0sum)
(p0sim)/(p0sum)
1-(p0sim)/(p0sum)
SMATAPKG::pdry(temp)
1-(1-p0sim)/(1-p0sum)
1-SMATAPKG::pdry(temp)
(1-p0sim)/(1-p0sum)
mean(temp)
mean(Xsum)
mean(Xsum)/(24*(1-p0sum))
mean(temp)
mean(Xsum)/(24*(1-p0sum))
24*mean(Xsum)/(24*(1-p0sum))
mean(temp)
(24*mean(Xsum))/(24*(1-p0sum))
plot(Xsum[NZID], 1-PD)
1-SMATAPKG::pdry(temp)
(1-p0sim)/(1-p0sum)
mean(temp)
(24*mean(Xsum))/(24*(1-p0sum))
mean(Sim$X)
plot(Xsum[NZID], 1-PD, log='x')
plot(Xsum[NZID], 1-PD, log='xy')
plot(Xsum[NZID], 1-PD, log='y')
plot(Xsum[NZID], 1-PD, log='')
1-SMATAPKG::pdry(temp)
(1-p0sim)/(1-p0sum)
mean(temp)
(24*mean(Xsum))/(24*(1-p0sum))
p0sim
1-SMATAPKG::pdry(temp)
acf(as.vector(t(Xmat[NZID,])))
lines(0:(length(ACF)-1), ACF)
mean(temp)
mean(temp)*(1-p0sim)/(1-p0sum)
(1-p0sim)/(1-p0sum)
mean(Sim$X[Sim$X>0])
mean(temp)*(1-p0sim)/(1-p0sum)
mean(temp)/(1-p0sim)/(1-p0sum)
mean(Sim$X[Sim$X>0])
mean(temp)
mean(temp[temp>0])
mean(temp)
(24*mean(Xsum))/(24*(1-p0sum))
mean(Sim$X[Sim$X>0])
mean(temp[temp>0])
var(Sim$X[Sim$X>0])
var(temp[temp>0])
mean(PD)
1-mean(PD)
1-SMATAPKG::pdry(temp)
(1-p0sim)/(1-p0sum)
1-mean(PD)
mean(temp)
(24*mean(Xsum))/(24*(1-p0sum))
mean(Sim$X[Sim$X>0])
mean(temp[temp>0])
var(Sim$X[Sim$X>0])
var(temp[temp>0])
moments::skewness(Sim$X[Sim$X>0])
moments::skewness(Sim$X[Sim$X>0])
moments::skewness(temp[temp>0])
1-mean(PD)
mean(PD)
plot(Xsum[NZID], 1-PD, log='')
colMeans(CC)
hist(PD)
hist(1-PD)
plot(Xsum[NZID], 1-PD, log='')
1-mean(PD)
fitB=fitdistrplus::fitdist(data = (1-PD), distr = 'beta', method = 'mle')
fitB=fitdistrplus::fitdist(data = (1-PD), distr = 'beta', method = 'mle', start = list(shape1=1, shape2=1))
(1-PD)
fitB=fitdistrplus::fitdist(data = (1-PD), distr = 'beta', method = 'qme', probs=c(0.2, 0.5), start = list(shape1=1, shape2=1))
plot(fitB)
fitB=fitdistrplus::fitdist(data = (1-PD), distr = 'beta', method = 'gme', probs=c(0.2, 0.5), start = list(shape1=1, shape2=1))
fitB=fitdistrplus::fitdist(data = (1-PD), distr = 'beta', method = 'mme', probs=c(0.2, 0.5), start = list(shape1=1, shape2=1))
plot(fitB)
var(1-PD)
fitB=fitdistrplus::fitdist(data = (1-PD), distr = 'beta', method = 'mme', probs=c(0.2, 0.5), start = list(shape1=1, shape2=1))
plot(fitB) # actuar has an mbeta function
fitB=fitdistrplus::fitdist(data = (1-PD), distr = 'beta', method = 'qme', probs=c(0.2, 0.5), start = list(shape1=1, shape2=1))
plot(fitB) # actuar has an mbeta function
which.max(Xsum)
MAXID=which.max(Xsum)
plot(Xmat[MAXID,])
barplot(Xmat[MAXID,])
text(c(1,1), 'ada')
barplot(Xmat[MAXID,])
text(c(1,10), 'ada')
text(1, 10, 'ada')
barplot(Xmat[MAXID,])
text(1, 10, 'ada')
text(1, 10, paste0('Rain sum: ', Xsum[MAXID]))
Xsum[MAXID]
barplot(Xmat[MAXID,])
text(1, 10, paste0('Rain sum: ', round(Xsum[MAXID],2)))
text(1, 10, paste0('Rain sum: ', round(Xsum[MAXID],2)), col='red')
barplot(Xmat[MAXID,])
text(5, 10, paste0('Rain sum: ', round(Xsum[MAXID],2)), col='red')
barplot(Xmat[MAXID,])
text(5, 10, paste0('Rain sum: ', 24*round(Xsum[MAXID],2)), col='red')
sum(Xmat[MAXID,])
library(evir)
data(bmw)
bmw
out <- gev(bmw, "month", )
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out, 40)
out <- gev(bmw, "month", )
out
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 40)
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 40, add = T)
# Fit GEV to monthly maxima of daily returns on BMW share price
plot(rlevel.gev(out = out, k.blocks = 40, add = T))
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 40, add = T)
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 40, add = F)
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 40)
out
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 40)[2]
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 200)[2]
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 40, add = TRUE)
out <- gev(bmw, "annual", )
out <- gev(bmw, "year", )
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 40, add = TRUE)
out <- gev(bmw, "month", )
12*3
40*!2
40*12
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 480, add = TRUE)
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 100*12, add = TRUE)
out <- gev(bmw, "year", )
# Fit GEV to monthly maxima of daily returns on BMW share price
rlevel.gev(out = out, k.blocks = 100, add = TRUE)
acf(as.vector(bmw))
plot(bmw)
plot(bmw, t='l')
head(bmw)
data(bmw)
bmw
plot(bmw, t='l')
bmw
plot(bmw)
bmw
as.xts(bmw)
head(bmw)
class(bmw)
library(xts)
library(lubridate)
library(rdwd)
library(readr)
library(ggplot2)
library(scales) # YT: this one is also needed.
cwd <- getwd()
source(file.path(cwd,"Functions","delim2xts.R"))
file <- "WTPInletData.txt"
file_path <- file.path(cwd,file)
date_format <- "%d/%m/%Y %H:%M"
time_zone <- "UTC"
data <- delim2xts(file_path = file_path, date_format = date_format, time_zone = "UTC")
source(file.path(cwd,"Functions","check_missing.R"))
missing <- check_missing(data, c("months","years"))
#View(missing$prct_missing)
missing$list_months$figure
source(file.path(cwd,"Functions","plot_missing.R"))
plt_missing <- plot_missing(data[,3])
plt_missing
source(file.path(cwd,"Functions","basic_stats.R"))
bstats <- basic_stats(data[,4], pstart = '2002',pend = '2005', xpos_table = 0.1)
View(bstats)
stats_table
bstats <- stats_table
bstats$stats_table
bstats$quantiles_table
bstats$plot
#manual_season, e.g. dry and wet season
agg_ts <- aggregate_ts(data[,4], periods = c("months","quarters","years"), FUN = 'mean', season_end = c("10-15","04-01"),
mseason_title = "Arbitrary")
source(file.path(cwd,"Functions","aggregate_ts.R"))
source(file.path(cwd,"Functions","monthly_stats.R"))
monthly_sts <- monthly_stats(data[,4],base_scale = TRUE, FUN = "mean")
monthly_sts$faggre
monthly_sts$fbase
monthly_sts$fbase
getwd()
setwd("C:/Users/Admin/Documents")
getwd()
devtools::create("anyFit")
setwd("C:/Users/Admin/Documents/KNMI_example")
devtools::create("anyFit")
here::
install.packages("here")
here::dr_here()
setwd("C:/Users/Admin/Documents")
devtools::create("anyFit")
setwd("C:/Users/Admin/Documents/anyFit")
